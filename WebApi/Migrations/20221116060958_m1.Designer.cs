// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20221116060958_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("WebApi.Entities.Cashflow", b =>
                {
                    b.Property<int>("CashFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("CashFlowId");

                    b.HasIndex("UserId1");

                    b.ToTable("Cashflows");

                    b.HasData(
                        new
                        {
                            CashFlowId = 1,
                            Amount = 300.0,
                            Description = "Apple",
                            ProjectType = "Technology",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 2,
                            Amount = 100.0,
                            Description = "Apple",
                            ProjectType = "Technology",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 3,
                            Amount = 300.0,
                            Description = "Deloitte",
                            ProjectType = "Finance",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 4,
                            Amount = 200.0,
                            Description = "Deloitte",
                            ProjectType = "Finance",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 5,
                            Amount = 500.0,
                            Description = "Chevron",
                            ProjectType = "Energy",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 6,
                            Amount = 500.0,
                            Description = "Chevron",
                            ProjectType = "Energy",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 7,
                            Amount = 100.0,
                            Description = "Google",
                            ProjectType = "Technology",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 8,
                            Amount = 400.0,
                            Description = "Google",
                            ProjectType = "Technology",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 9,
                            Amount = 200.0,
                            Description = "Microsoft",
                            ProjectType = "Technology",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 10,
                            Amount = 200.0,
                            Description = "Microsoft",
                            ProjectType = "Technology",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 11,
                            Amount = 1000.0,
                            Description = "Meta",
                            ProjectType = "Technology",
                            Type = "Out",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 12,
                            Amount = 300.0,
                            Description = "Amazon",
                            ProjectType = "Technology",
                            Type = "In",
                            UserId = 2
                        },
                        new
                        {
                            CashFlowId = 13,
                            Amount = 400.0,
                            Description = "Amazon",
                            ProjectType = "Technology",
                            Type = "In",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "ff2e3a7f-9312-489c-b2cb-e6caa1d7d897",
                            ConcurrencyStamp = "cb491f32-deff-4632-ab30-0e2167ad4bee",
                            CreatedDate = new DateTime(2022, 11, 15, 22, 9, 57, 820, DateTimeKind.Local).AddTicks(9509),
                            Description = "Admin Role",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "810f7074-293c-40e4-859e-d5da5806745d",
                            ConcurrencyStamp = "5371e0f8-ad12-4be4-b067-24cbe61c471a",
                            CreatedDate = new DateTime(2022, 11, 15, 22, 9, 57, 820, DateTimeKind.Local).AddTicks(9596),
                            Description = "User Role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35096d1f-ba9e-4f60-94f1-eaf92456e802",
                            EmailConfirmed = false,
                            Expired = new DateTime(2032, 11, 15, 22, 9, 57, 591, DateTimeKind.Local).AddTicks(2351),
                            IsAdmin = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            PasswordHash = "$2a$11$e53Rhajl/FTi2m6ky/DQq.Z2sTIgb.6ee14P0z97UrxuiFae7A14y",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d207a5f-753b-4f2b-80ff-e0d400eb69eb",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "876c9cb9-56e1-4cb4-9715-8f7882a0467f",
                            EmailConfirmed = false,
                            Expired = new DateTime(2022, 11, 22, 22, 9, 57, 820, DateTimeKind.Local).AddTicks(8753),
                            IsAdmin = false,
                            LockoutEnabled = false,
                            Name = "User1",
                            PasswordHash = "$2a$11$njd9isDYSDqeKD2oRuqsg.IPr1BSq.BsltTPihoLfabYdU002qLn2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63b13a0f-e0b2-4622-83d0-6030e2c23f22",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.UserRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            RoleId = "ff2e3a7f-9312-489c-b2cb-e6caa1d7d897",
                            UserId = "1"
                        },
                        new
                        {
                            Id = "2",
                            RoleId = "810f7074-293c-40e4-859e-d5da5806745d",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Cashflow", b =>
                {
                    b.HasOne("WebApi.Entities.User", "User")
                        .WithMany("Cashflows")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Entities.UserRoles", b =>
                {
                    b.HasOne("WebApi.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("WebApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Navigation("Cashflows");
                });
#pragma warning restore 612, 618
        }
    }
}
