// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20221110002918_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("WebApi.Entities.Cashflow", b =>
                {
                    b.Property<int>("CashFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("CashFlowId");

                    b.HasIndex("UserId1");

                    b.ToTable("Cashflows");

                    b.HasData(
                        new
                        {
                            CashFlowId = 1,
                            Amount = 100.0,
                            Description = "test",
                            ProjectType = "test",
                            Type = "In",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "c95d057c-48cd-457f-9950-d6ad01a198be",
                            ConcurrencyStamp = "e9d96c39-007f-4fb4-b071-8d42e329682c",
                            CreatedDate = new DateTime(2022, 11, 9, 16, 29, 18, 489, DateTimeKind.Local).AddTicks(8326),
                            Description = "Admin Role",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "48bc98a0-3f51-436b-9f66-7a94d9eeffb8",
                            ConcurrencyStamp = "94e6856d-6d30-4375-bb19-3ea38a54a174",
                            CreatedDate = new DateTime(2022, 11, 9, 16, 29, 18, 489, DateTimeKind.Local).AddTicks(8405),
                            Description = "User Role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fe0f65c-bb8e-4922-b9da-6b8b78f0548a",
                            EmailConfirmed = false,
                            Expired = new DateTime(2032, 11, 9, 16, 29, 18, 263, DateTimeKind.Local).AddTicks(5322),
                            IsAdmin = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            PasswordHash = "$2a$11$2ftW2ve4wP7FCk1Cbf.tOODtma0D3vjdj5Z9iTjESEyEBtcoYbbu.",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "009cc2ab-0ebe-4007-a699-3fa8cc5b75a2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d67b64a1-e0e7-4e34-a50c-c9fbde8a0b92",
                            EmailConfirmed = false,
                            Expired = new DateTime(2022, 11, 16, 16, 29, 18, 489, DateTimeKind.Local).AddTicks(7699),
                            IsAdmin = false,
                            LockoutEnabled = false,
                            Name = "User1",
                            PasswordHash = "$2a$11$xr3FluIAY5f7zHPLPQTODu8jj2vUBJCnr3omPOy.rYYesJazS/wFW",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bee029b9-4414-45ac-b78f-39b91ff339b0",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.UserRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            RoleId = "c95d057c-48cd-457f-9950-d6ad01a198be",
                            UserId = "1"
                        },
                        new
                        {
                            Id = "2",
                            RoleId = "48bc98a0-3f51-436b-9f66-7a94d9eeffb8",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Cashflow", b =>
                {
                    b.HasOne("WebApi.Entities.User", "User")
                        .WithMany("Cashflows")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Entities.UserRoles", b =>
                {
                    b.HasOne("WebApi.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("WebApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Navigation("Cashflows");
                });
#pragma warning restore 612, 618
        }
    }
}
